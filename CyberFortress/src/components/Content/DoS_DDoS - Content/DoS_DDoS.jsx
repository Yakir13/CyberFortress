import './DoS_DDoS.css'
import { useState } from 'react';

function DoS_DDoS(){
    const [isVisible1, setIsVisible1] = useState(false)
    const [isVisible2, setIsVisible2] = useState(false)
    const [isVisible3, setIsVisible3] = useState(false)
    const [isVisible4, setIsVisible4] = useState(false)
    const [isVisible5, setIsVisible5] = useState(false)
    const [isVisible6, setIsVisible6] = useState(false)
    const [isVisible7, setIsVisible7] = useState(false)
    const [isVisible8, setIsVisible8] = useState(false)
    
    return(
    <div className="DoS_DDoS">
        <div id="main">
            <h1 dir='rtl'>DoS & DDoS</h1>
            <h2 dir='rtl'>Denial of Service - מניעת שירות (DoS)</h2>
            <p dir='rtl'>התקפת מניעת שירות היא מתקפת סייבר שמטרתה לשבש או למנוע גישה תקינה לשירותי רשת, אתרי אינטרנט או שרתים על ידי הצפתם בכמות עצומה של בקשות או מידע ממקור יחיד. ההצפה יוצרת עומס יתר על המערכת, מה שמוביל להאטה משמעותית או לקריסת השירות, ובכך מונעת ממשתמשים לגיטימיים גישה אליו. למרות שהתקפת DoS נחשבת לפשוטה יחסית לביצוע, היא עלולה לגרום לנזקים תפעוליים וכלכליים חמורים. כדי להתגונן מפניה, נעשה שימוש בכלים כמו חומות אש, הגבלת קצב בקשות ומערכות לניטור תעבורה.</p>
            <br />
            <h2 dir='rtl'>Distributed Denial of Service - מניעת שירות מבוזרת (DDoS)</h2>
            <p dir='rtl'>התקפת מניעת שירות מבוזרת היא גרסה מתקדמת וחזקה יותר של התקפת DoS, שבה התוקף משתמש ברשת של מחשבים פרוצים (בוטנטים) כדי להציף שרת, אתר או שירות ברשת בכמות עצומה של בקשות בו-זמנית. מטרת ההתקפה היא ליצור עומס חריג על המערכת, מה שמוביל להאטה משמעותית או לקריסת השירות ומונע ממשתמשים לגיטימיים גישה אליו. מכיוון שההתקפה מתבצעת ממספר מקורות במקביל, קשה יותר לזהות ולחסום אותה. התמודדות עם התקפות DDoS דורשת כלים מתקדמים כמו מערכות לניטור תעבורה, שירותי הגנה מבוססי ענן וחומות אש חכמות.</p>
            <p dir='rtl'>לא כל מתקפת DoS יכולה להיות מתקפת DDoS. מתקפת DoS מתבצעת על ידי מחשב אחד או מקור אחד שמבצע את ההתקפה, בעוד שמתקפת DDoS מבוצעת על ידי רשת של מחשבים או מקורות, שמפיצים את ההתקפה כדי להעמיס על המערכת ולהשבית אותה, כך ש- DDoS היא סוג של DoS, אך DoS אינה בהכרח DDoS.</p>
        </div>
        <div className="examples">
            <h1>דוגמאות</h1>
            <button className={isVisible1 ? "active-button" : ""} onClick={()=>setIsVisible1(!isVisible1)}>SYN Flood</button>
            {isVisible1 && (<p dir='rtl' className='isVisible'>מתקפה שמטרתה להעמיס על שרת ולשבש את פעילותו התקינה באמצעות ניצול תהליך ה-TCP Handshake. תהליך זה כולל שלושה שלבים: הלקוח שולח בקשת חיבור (SYN), השרת משיב באישור (SYN-ACK), ולאחר מכן הלקוח מאשר את החיבור (ACK). במתקפת SYN Flood, התוקף מציף את השרת בכמות עצומה של בקשות SYN מזויפות או שאינן מסתיימות באישור סופי, מה שגורם לשרת להמתין לאישור שלא מגיע. כתוצאה מכך, משאבי השרת (כגון זיכרון ופתחים בפורטים) מתמלאים במהירות, מה שעלול לגרום לאיטיות קיצונית, דחיית חיבורים חדשים ואף לקריסה מוחלטת. כדי להגן על המערכת, ניתן להשתמש בטכניקות כמו SYN Cookies שמונעות הקצאת משאבים לפני אימות מלא, להפעיל חומות אש מתקדמות, להגביל את קצב החיבורים וליישם מערכות לזיהוי ומניעת חדירות (IDS/IPS). צעדים אלו מסייעים בזיהוי תעבורה חריגה ובמניעת ניצול משאבי השרת עד למיצוי.</p>)}
            <br />
            <button className={isVisible2 ? "active-button" : ""} onClick={()=>setIsVisible2(!isVisible2)}>UDP Flood</button>
            {isVisible2 && (<p dir='rtl' className='isVisible'>מתקפה שבה התוקף מציף את השרת או רשת היעד בכמות עצומה של חבילות UDP (User Datagram Protocol) במטרה להעמיס על המשאבים ולגרום לשיבוש השירות. פרוטוקול UDP הוא פרוטוקול תקשורת נטול חיבור (Connectionless) שאינו דורש תהליך של "לחיצת יד" (Handshake) כמו בפרוטוקול TCP, מה שהופך אותו לפגיע יותר למתקפות מסוג זה. במתקפה, התוקף שולח חבילות UDP אקראיות לפורטים רבים בשרת, מה שמאלץ את השרת לבדוק כל חבילה ולנסות למצוא את השירות המתאים או להגיב בחבילת ICMP מסוג "Destination Unreachable" אם הפורט סגור. תהליך זה גוזל משאבים רבים מהשרת ויכול להוביל לאיטיות, עומס כבד ואף קריסה. בנוסף, כאשר מדובר במתקפת DDoS, ההצפה מתבצעת ממספר רב של מקורות, מה שמקשה על זיהוי וחסימת התוקפים. כדי להתמודד עם מתקפות UDP Flood, ניתן להפעיל חומות אש (Firewalls) וחוקי סינון שמגבילים את תעבורת ה-UDP, להשתמש במערכות לזיהוי ומניעת חדירות (IDS/IPS), להפעיל שירותי Anti-DDoS ולנתב תעבורה מזיקה באמצעות רשתות הגנה מתקדמות (כגון CDN או שירותי ענן ייעודיים).</p>)}
            <br />
            <button className={isVisible3 ? "active-button" : ""} onClick={()=>setIsVisible3(!isVisible3)}>RUDY (R-U-Dead-Yet)</button>
            {isVisible3 && (<p dir='rtl' className='isVisible'>מתקפה המתמקדת בהשבתת אתרי אינטרנט ויישומים על ידי ניצול חולשות בפרוטוקול HTTP ובניהול משאבי השרת. בניגוד למתקפות שמבוססות על הצפת תעבורה, RUDY היא מתקפה "שקטה" שמתמקדת בהאטת השרת באמצעות שליחת בקשות POST לגיטימיות בקצב איטי במיוחד. התוקף פותח חיבור לשרת ושולח בקשת POST הכוללת שדה Content-Length גדול, מה שמאותת לשרת לצפות לנתונים בנפח משמעותי. עם זאת, הנתונים נשלחים בקצב איטי מאוד ובמקטעים קטנים, מה שמאלץ את השרת להקצות משאבים ולשמור את החיבור פתוח לפרק זמן ארוך. כאשר תוקפים רבים מבצעים את הפעולה במקביל (או שהתוקף מפעיל מספר חיבורים במקביל), משאבי השרת עלולים להתמלא, מה שגורם לאיטיות קיצונית ואף להשבתת השירות למשתמשים לגיטימיים. אחד מהאתגרים בזיהוי מתקפת RUDY הוא שהבקשות עצמן נראות חוקיות, מה שמקשה על מערכות האבטחה להבדיל בין תעבורה לגיטימית למזיקה. כדי להגן על השרתים, מומלץ להגדיר מגבלות זמן לחיבורים פתוחים, לזהות תבניות תעבורה חריגות בעזרת מערכות WAF (Web Application Firewall), להשתמש בפתרונות לזיהוי מתקפות איטיות ולהגביל את מספר החיבורים הפעילים בו זמנית לכל משתמש.</p>)}
            <br />
            <button className={isVisible4 ? "active-button" : ""} onClick={()=>setIsVisible4(!isVisible4)}>IoT-Based</button>
            {isVisible4 && (<p dir='rtl' className='isVisible'>מתקפה המנצלת את הפגיעויות הקיימות במכשירי IoT (Internet of Things) לביצוע מתקפה רחבת היקף על רשתות, אתרי אינטרנט או שרתים. מכשירי IoT, כמו מצלמות אבטחה, ראוטרים חכמים, מדחמים, מכשירי בית חכם וחיישנים תעשייתיים, מחוברים לרשת ולעיתים קרובות אינם מוגנים כראוי בסיסמאות חזקות או בעדכוני אבטחה. תוקפים מנצלים חולשות אלו כדי להדביק את המכשירים בווירוסים או בוטנטים (כגון Mirai) ולהפוך אותם לחלק מרשת התקפית (Botnet). ברגע שמספר גדול של מכשירים נשלטים על ידי התוקף, הם מתואמים לשלוח כמויות עצומות של בקשות או חבילות נתונים אל יעד מסוים, מה שגורם לעומס חריג, איטיות חמורה ולעיתים אף לקריסה מוחלטת של השרת או הרשת המותקפת. יתרונם של מתקפות IoT-Based DDoS הוא בקנה המידה העצום שלהן, שכן כמות מכשירי ה-IoT בעולם הולכת וגדלה, והם יכולים לפעול ממגוון רחב של מיקומים גאוגרפיים מבלי לעורר חשד מיידי. התמודדות עם מתקפות אלו כוללת שימוש בשירותי Anti-DDoS מתקדמים, ניטור תעבורת הרשת לזיהוי דפוסים חריגים, חיזוק אבטחת מכשירי IoT באמצעות עדכוני תוכנה קבועים, שינוי סיסמאות ברירת מחדל והגדרת חומות אש ופתרונות סינון ייעודיים למניעת תעבורה זדונית.</p>)}
            <br />
            <button className={isVisible5 ? "active-button" : ""} onClick={()=>setIsVisible5(!isVisible5)}>Zero-Day</button>
            {isVisible5 && (<p dir='rtl' className='isVisible'>מתקפה המתבססת על ניצול חולשות אבטחה שטרם התגלו או שטרם פורסמו לציבור, ולכן אין להן עדיין עדכוני אבטחה או פתרונות מוכנים. המונח "Zero-Day" מתייחס ליום שבו החולשה מתגלה, כאשר לארגונים יש אפס ימים להיערך או להגן על עצמם מפניה. במתקפה זו, תוקפים מזהים נקודות תורפה במערכות הפעלה, פרוטוקולים, תוכנות או שירותי רשת, ומנצלים אותן ליצירת עומס חריג על שרתים, רשתות או יישומים. בניגוד למתקפות DDoS קלאסיות שמבוססות על הצפת תעבורה נפוצה (כגון SYN Flood או UDP Flood), מתקפות Zero-Day משתמשות בטכניקות מתוחכמות ובלתי צפויות, מה שמקשה על מערכות אבטחה מסורתיות לזהות ולחסום אותן בזמן אמת. מתקפות אלו עלולות לגרום להשבתת שירותים קריטיים, דליפת מידע או פגיעה במוניטין הארגון. כדי להתמודד עם האיום, יש להשתמש במערכות אבטחה מתקדמות מבוססות AI ו-Machine Learning המסוגלות לזהות דפוסי פעילות חריגים, לשלב שירותי Anti-DDoS ולבצע עדכוני אבטחה שוטפים. בנוסף, יש ליישם תוכניות תגובה מהירות לאירועי סייבר ולשמור על מערכות ניטור המסוגלות לזהות מתקפות לא שגרתיות בזמן אמת.</p>)}
            <br />
            <button className={isVisible6 ? "active-button" : ""} onClick={()=>setIsVisible6(!isVisible6)}>NTP Amplification</button>
            {isVisible6 && (<p dir='rtl' className='isVisible'>מתקפה המנצלת את פרוטוקול ה-NTP (Network Time Protocol) לצורך הגברת עוצמת ההתקפה באמצעות טכניקת Amplification (הגברה) ו-Reflection (החזרה). פרוטוקול NTP, אשר משמש לסנכרון שעונים בין מחשבים ברשת, פועל מעל פרוטוקול UDP ונחשב לפגיע בשל אופי התקשורת הבלתי מבוססת חיבור שלו. במתקפה זו, התוקף שולח בקשות NTP מזויפות (בעיקר פקודת monlist) אל שרתי NTP פתוחים, תוך זיוף כתובת ה-IP של הקורבן. שרת ה-NTP מגיב לבקשה עם רשימת כתובות IP של עד 600 לקוחות איתם היה בקשר לאחרונה, מה שמייצר תגובה גדולה בהרבה מהבקשה המקורית – לעיתים ביחס של פי 200 ואף יותר. כאשר התוקף שולח אלפי בקשות כאלה בו זמנית, הקורבן מוצף בכמות עצומה של נתונים, מה שגורם לעומס כבד על רוחב הפס ולקריסת מערכות הרשת או השרתים. היתרון מבחינת התוקף הוא היכולת לגרום לנזק משמעותי באמצעות משאבים מינימליים. להתמודדות עם מתקפות NTP Amplification יש לחסום פקודות לא נחוצות בשרתי NTP (כגון monlist), להפעיל הגנות ברמת ה-Firewall לזיהוי וחסימת תעבורה חשודה, להשתמש בשירותי Anti-DDoS מתקדמים ולוודא שכל שרתי ה-NTP מעודכנים ומוגדרים כראוי כדי למנוע ניצול לרעה.</p>)}
            <br />
            <button className={isVisible7 ? "active-button" : ""} onClick={()=>setIsVisible7(!isVisible7)}>Voice Flood Attack</button>
            {isVisible7 && (<p dir='rtl' className='isVisible'>מתקפה שמטרתה להציף מערכות טלפוניה או שירותי VoIP (Voice over IP) באמצעות תעבורת קול מזויפת או הצפת שיחות לא רצויות. המתקפה מבוצעת על ידי שליחת כמות עצומה של שיחות טלפון או חבילות קול (voice packets) אל יעד ספציפי, כמו שרתי VoIP או מרכזי שירות לקוחות. במקרים רבים, המתקפה כוללת זיוף של כתובת ה-IP של השולח, מה שמקשה על זיהוי התוקף. המתקפה יוצרת עומס חריג על המערכת, מה שמוביל להשבתה או האטה משמעותית בשירותי הטלפוניה, חווית משתמש פגומה, ואף לפגיעה במוניטין של הארגון. אחד האתגרים המרכזיים במתקפה זו הוא שמערכת ה-VoIP או הטלפוניה לא תמיד יכולה להבחין בין תעבורה לגיטימית לתעבורה מזויפת, במיוחד כאשר השיחות כוללות פרמטרים חוקיים כמו מזהי שיחה ופרטי קול תקניים. כדי להגן על מערכות VoIP מפני מתקפות כאלו, יש להטמיע אמצעי אבטחה כמו מערכות IDS/IPS לזיהוי תעבורה חריגה, חומות אש המיועדות לזיהוי ולחסימת תעבורת קול זדונית, שימוש בחניכות IP מותאמות כדי למנוע זיוף כתובת, והגדרת מגבלות על מספר השיחות שניתן לבצע בו-זמנית.</p>)}
            <br />
            <button className={isVisible8 ? "active-button" : ""} onClick={()=>setIsVisible8(!isVisible8)}>SSH Brute Force</button>
            {isVisible8 && (<p dir='rtl' className='isVisible'>מתקפה המנצלת את חולשות אבטחת המערכת ב-SSH (Secure Shell) כדי לנסות לפרוץ לחשבונות משתמשים על ידי שליחת כמות עצומה של ניסיונות התחברות עם סיסמאות מזויפות. במתקפה זו, התוקף מפעיל בוטנט (רשת של מחשבים נגועים) כדי לשלוח אלפי בקשות להתחברות לשרת SSH, כל אחת עם סיסמה שגויה או חיבור מזויף, במטרה למצוא את הסיסמה הנכונה ולהשיג גישה למערכת. מתקפת ה-Brute Force עצמה מתבצעת באמצעות חיבור חוזר ונשנה לשרת במטרה לנחש את פרטי ההתחברות. כאשר מדובר במתקפת DDoS, מספר התוקפים המעורבים יכול להיות עצום, מה שגורם לעומס משמעותי על שרת ה-SSH ומונע ממערכת לגיטימית לקבל חיבורים. המטרה היא לא רק להשיג גישה למערכת, אלא גם לשבש את השירות ולהביא את השרת או הרשת לקריסה, במיוחד אם השרת אינו מוגן כראוי. כדי להילחם במתקפה כזו, יש להפעיל אמצעי אבטחה כמו מגבלות ניסיונות חיבור (הגבלת מספר ניסיונות התחברות בשעה), שימוש במפתחות SSH במקום סיסמאות, אימות דו-שלבי (2FA), סינון כתובות IP חשודות על ידי חומות אש, ומערכות IDS/IPS שיכולות לזהות ולחסום תעבורה זדונית.</p>)}
        </div>
    </div>
    )
}
export default DoS_DDoS;