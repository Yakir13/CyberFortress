import './DoS_DDoS.css'

function DoS_DDoS(){
    return(
    <div className="DoS_DDoS">
        <h1 dir='rtl'> התקפות DoS & DDoS</h1>
        <h2 dir='rtl'>Denial of Service - מניעת שירות (DoS)</h2>
        <p dir='rtl'>התקפת מניעת שירות היא מתקפת סייבר שמטרתה לשבש או למנוע גישה תקינה לשירותי רשת, אתרי אינטרנט או שרתים על ידי הצפתם בכמות עצומה של בקשות או מידע ממקור יחיד. ההצפה יוצרת עומס יתר על המערכת, מה שמוביל להאטה משמעותית או לקריסת השירות, ובכך מונעת ממשתמשים לגיטימיים גישה אליו. למרות שהתקפת DoS נחשבת לפשוטה יחסית לביצוע, היא עלולה לגרום לנזקים תפעוליים וכלכליים חמורים. כדי להתגונן מפניה, נעשה שימוש בכלים כמו חומות אש, הגבלת קצב בקשות ומערכות לניטור תעבורה.</p>
        <h2 dir='rtl'>Distributed Denial of Service - מניעת שירות מבוזרת (DDoS)</h2>
        <p dir='rtl'>התקפת מניעת שירות מבוזרת היא גרסה מתקדמת וחזקה יותר של התקפת DoS, שבה התוקף משתמש ברשת של מחשבים פרוצים (בוטנטים) כדי להציף שרת, אתר או שירות ברשת בכמות עצומה של בקשות בו-זמנית. מטרת ההתקפה היא ליצור עומס חריג על המערכת, מה שמוביל להאטה משמעותית או לקריסת השירות ומונע ממשתמשים לגיטימיים גישה אליו. מכיוון שההתקפה מתבצעת ממספר מקורות במקביל, קשה יותר לזהות ולחסום אותה. התמודדות עם התקפות DDoS דורשת כלים מתקדמים כמו מערכות לניטור תעבורה, שירותי הגנה מבוססי ענן וחומות אש חכמות.</p>
        <h3 dir='rtl'>לא כל מתקפת DoS יכולה להיות מתקפת DDoS. מתקפת DoS מתבצעת על ידי מחשב אחד או מקור אחד שמבצע את ההתקפה, בעוד שמתקפת DDoS מבוצעת על ידי רשת של מחשבים או מקורות, שמפיצים את ההתקפה כדי להעמיס על המערכת ולהשבית אותה, כך ש- DDoS היא סוג של DoS, אך DoS אינה בהכרח DDoS.</h3>
        <h1>דוגמאות</h1>
        {/* <h2 dir='rtl'>דוגמאות להתקפות DoS & DDoS</h2> */}
        <p dir='rtl'>1. <b>SYN Flood - </b>התקפת DoS שמנצלת את תהליך ה-TCP Handshake כדי לשבש את פעילות השרת. בפרוטוקול TCP, יצירת חיבור תקין מתבצעת בשלושה שלבים: הלקוח שולח בקשת SYN, השרת משיב ב-SYN-ACK, ואז הלקוח שולח בחזרה הודעת ACK לאישור סופי. בהתקפת SYN Flood, התוקף שולח מספר רב של בקשות SYN לשרת, תוך שימוש בכתובות IP מזויפות או לא קיימות. השרת, שמנסה להגיב בכל פעם עם הודעת SYN-ACK ולחכות לאישור הסופי (ACK), משאיר את החיבורים במצב "ממתין" (Half-Open). כיוון שהאישור הסופי לא מגיע, משאבי השרת (כגון זיכרון וחיבורים פתוחים) מתמלאים במהירות, מה שעלול להביא לעומס יתר, ירידה בביצועים או קריסה מוחלטת של השרת. על מנת להגן מפני התקפה זו ניתן להשתמש בטכניקות כמו SYN Cookies, שמונעות מהשרת להקצות משאבים לפני קבלת האישור הסופי, או להשתמש בחומות אש (Firewalls) ומערכות למניעת חדירות (IPS) המסוגלות לזהות ולחסום תעבורה זדונית.</p>
        <p dir='rtl'>2. <b>UDP Flood - </b>התקפת DoS שבה התוקף מציף את היעד בכמות עצומה של מנות UDP (User Datagram Protocol) במטרה להעמיס על המשאבים שלו ולשבש את פעילותו התקינה. מאחר ו-UDP הוא פרוטוקול חסר חיבור (Connectionless) שאינו מבצע תהליך Handshake כמו TCP, התוקף יכול לשלוח מנות בקצב גבוה מאוד ללא צורך באימות. המנות נשלחות ליציאות (Ports) אקראיות או ספציפיות במטרה לגרום לשרת לבדוק אם יש שירות פעיל באותן יציאות. כאשר השרת מקבל את המנות, הוא מנסה להשיב בהודעת ICMP Destination Unreachable אם אין שירות מאזין ביציאה הנבחרת, מה שיוצר עומס נוסף על המערכת. עומס זה עלול לגרום לצריכת יתר של משאבי המעבד, הזיכרון ורוחב הפס, מה שמוביל להאטה משמעותית או לקריסה מוחלטת של השרת או הרשת. כדי להגן מפני התקפה זו ניתן להשתמש בחומות אש (Firewalls) שחוסמות תעבורת UDP לא נחוצה, במערכות למניעת חדירות (IPS) ובתצורות רשת שמגבילות את קצב התעבורה הנכנסת.</p>
        <p dir='rtl'>3. <b>HTTP Flood - </b>התקפת DoS שבה התוקף שולח כמות עצומה של בקשות HTTP לשרת האינטרנט במטרה להעמיס על המשאבים שלו ולשבש את השירות. בהתקפה זו, התוקף לא משתמש בבקשות משאבים גדולים כמו בקשות קבצים כבדים או תמונות, אלא מבצע שליחה של בקשות פשוטות כגון טעינת דפים, שמנועים את השרת לבצע פעולות רבות של עיבוד וביצוע בקשות מתוך קבצי קוד או מסדי נתונים. כל בקשה כזו גוזלת זמן מעבד וזיכרון, ובעיקר כשתוקפים הרבה בקשות בו זמנית, השרת מתקשה להתמודד עם העומס. התקפות HTTP Flood יכולות להתבצע על ידי שליחת בקשות GET או POST לאתר באופן חזרתי ומידי, ולגרום לעומס יתר על השרת שמוביל להאטה, תקלות בתפקוד או קריסה מוחלטת של האתר. על מנת להגן מפני התקפה כזו, ניתן להשתמש בטכניקות כמו Rate Limiting, CAPTCHA, ושירותי הגנה נגד DDoS המפזרים את העומס על פני רשתות מרובות ומנטרים את הבקשות בצורה חכמה כדי לחסום את המתקפות בזמן אמת.</p>
        <p dir='rtl'>4. <b>ICMP Flood - </b>התקפת DoS שבה התוקף שולח כמות עצומה של הודעות ICMP Echo Request (המכונות גם פינג) לשרת או למחשב יעד במטרה למלא את רוחב הפס ולשבש את תפקוד הרשת. ב-ICMP Flood, התוקף מנצל את פרוטוקול ה-ICMP המשמש לבדיקת חיבוריות בין מחשבים, כדי לשלוח פינגים רבים אל היעד. השרת או המחשב הנמען, בתגובה לבקשות ה-ICMP Echo Request, שולח חזרה הודעות ICMP Echo Reply, מה שגורם לו לעבד ולעמוד בביצוע משאבים רבים כדי להגיב לכל פינג. בשעה שמספר הבקשות גדל משמעותית, המערכת או הרשת הנפגעת לא מסוגלת להתמודד עם העומס, מה שגורם להאטה בביצועים או אפילו לקריסת השירות. התקפה זו יכולה להיות מסוכנת במיוחד כאשר היעד נמצא ברשת בעלת רוחב פס מוגבל. כדי להימנע מהתקפות כאלו, ניתן להשתמש בחומות אש (Firewalls) כדי לחסום תעבורת ICMP בלתי רצויה, או להגדיר הגבלות על מספר בקשות ה-ICMP שמותרות להגיע מכתובת IP אחת בזמן נתון.</p>
        <p dir='rtl'>5. <b>Slowloris - </b>התקפת DoS שמתמקדת בהצפת השרת בקשרים חצי פתוחים (Half-Open Connections) על ידי שליחת בקשות HTTP בצורה איטית ומדורגת, כך שהשרת שומר את החיבורים פתוחים לאורך זמן מבלי לסיים את התהליך. המתקפה מתבצעת בכך שהתוקף שולח בקשות HTTP לשרת ומחזיק את החיבורים פתוחים על ידי שליחת חלקים מהבקשה בצורה איטית ומפוצלת (כמו כותרות HTTP חלקיות). בכך, השרת שומר את המשאבים הקשורים לחיבורים הללו, ומונע מלקוחות אחרים לקבל שירות, כיוון שהמשאבים של השרת נתפסים על ידי החיבורים החצי פתוחים הללו. המתקפה מתבצעת על פני זמן ממושך, כך שהתוקף יכול להשפיע על השרת ולהשאיר אותו במצב של עומס ממושך בלי להשאיר רמזים ברורים למתקפה. כדי להימנע מהתקפה כזו, ניתן להשתמש בטכניקות כמו Timeouts בחיבורים, הגבלות על כמות החיבורים הפתוחים בו זמנית, ושימוש בחומות אש או מערכות למניעת חדירות שמזהות תעבורה חשודה ומתמשכת.</p>
        <p dir='rtl'>6. <b>RUDY (R-U-Dead-Yet) Attack - </b>התקפת DoS שמתמקדת בהצפת השרת בבקשות HTTP באופן איטי במיוחד, במטרה למנוע מהשרת להגיב לבקשות לגיטימיות. המתקפה מבוססת על שליחת בקשות HTTP חצי גמורות בצורה מאוד אטית, כך שהשרת נשאר במצב "מחכה" לקבלת המידע החסר כדי להשלים את הבקשה. התוקף שולח כל בקשה באופן חלקי ומאוד אטי, מה שמוביל את השרת לבזבז זמן ומשאבים על חיבור לא שלם במשך פרק זמן ממושך. כך, השרת או היישום שצריך לטפל במאות או אלפי חיבורים חצי פתוחים לא יכול לטפל בבקשות אחרות, והמערכת נשארת "חסומה" ומפסיקה לשרת את המשתמשים. התקפות RUDY משאירות את השרת במצב של עומס מבלי לדרוש הרבה רוחב פס, והן קשות לזיהוי ולחסימה. כדי להגן מפני התקפה כזו, ניתן להפעיל Timeouts קצרים, למנוע חיבורים חלקיים ולהשתמש בטכניקות לניהול עומסים כמו Rate Limiting.</p>
        <p dir='rtl'>7. <b>DNS Amplification - </b>התקפת DDoS שבה התוקף מנצל את פרוטוקול ה-DNS (Domain Name System) כדי להפעיל התקפה על שרתים וכתובות IP מסוימות באמצעות עיבוי של הבקשות. בהתקפה זו, התוקף שולח בקשות DNS לא מאובטחות לשרתים פתוחים (אשר אינם מוגבלים לשירותי DNS עבור לקוחות ספציפיים), עם כתובת מקור מזויפת המצביעה על יעד אחר – בדרך כלל על השרת או המערכת שהן המטרות. שרת ה-DNS הפתוח מגיב לבקשות אלו על ידי שליחת תגובות גדולות בהרבה מהבקשות שנשלחו, כלומר מתקבלת "הגברה" של הבקשה. תגובות אלו נשלחות אל הכתובת המזויפת, שהיא הכתובת של היעד, מה שגורם להעמסת רוחב פס עצום על השרת או המחשב המותקף. מאחר והתגובה של DNS Amplification עשויה להיות פי 50-100 יותר גדולה מהבקשה המקורית, התקפה זו יכולה לגרום לצריכת משאבים מרובה של רוחב פס ולהשבית את השירותים או המערכות המותקפות. הגנה מפני התקפה כזו כוללת שימוש בשרתים מאובטחים, הפעלת תצורות DNS שמונעות בקשות לא מאובטחות, והגבלות על מספר הבקשות שמתקבלות מכתובת IP אחת.</p>
        <p dir='rtl'>8. <b>NTP Amplification - </b>התקפת DDoS שבה התוקף מנצל את פרוטוקול ה-NTP (Network Time Protocol) כדי להחמיר את העומס על יעד מסוים. בהתקפה זו, התוקף שולח בקשות מזויפות לשרתים פתוחים של NTP, עם כתובת מקור המפנה לכתובת ה-IP של היעד המותקף. השרת ה-NTP מגיב לבקשות אלו עם תגובות גדולות בהרבה מהבקשות המקוריות. לדוגמה, בקשה אחת של 50 בייט יכולה להניב תגובה של 500-1000 בייטים, כך שניתן להחמיר את העומס בצורה משמעותית. התקפות NTP Amplification מציבות את היעד תחת עומס עצום של תעבורה, מה שמוביל לשיבוש השירות או קריסה של השרת המותקף. התקפה זו מסוכנת במיוחד כיוון שהיא יכולה להשתמש בשרתים רבים בו זמנית, מה שמגביר את עוצמת ההתקפה. כדי להימנע מהתקפות NTP Amplification, חשוב להחמיר את האבטחה על שרתי NTP, להגביל את השימוש בהם ללקוחות מאומתים ולהפעיל חומות אש שיכולות לחסום בקשות חשודות.</p>
        <p dir='rtl'>9. <b>Botnet Reflection Attack - </b>התקפת DDoS שבה התוקף משתמש ברשת של מחשבים שנפגעו ונהפכו לבוטים (Botnet) כדי לבצע התקפות על יעד מסוים. בהתקפה זו, התוקף שולח בקשות מזויפות לשירותים פתוחים (כמו שרתי DNS, NTP או UDP) באמצעות מחשבים נגועים ברשת הבוטים, תוך כדי שימוש בכתובת IP של היעד המותקף. השירותים הפתוחים, בתגובה לבקשות, שולחים תגובות גדולות מאוד לכתובת ה-IP של היעד, מה שגורם לעומס עצום על השרת או הרשת המותקפת. התוקף מנצל את עקרון ה-Reflection בכך שהוא גורם לכך שהתגובות יישלחו לאלימות אל היעד המותקף, במקום אליו נשלחו הבקשות. התקפה זו מאוד אפקטיבית משום שהיא יכולה להפעיל מספר רב של בוטים באופן מנותב ולהשיג הגברת עומס משמעותית על היעד, תוך שהיא מסתירה את מקור המתקפה ומקשה על זיהוי התוקף. כדי להימנע מהתקפות כאלו, יש להשתמש בחומות אש, לפתח מערכות הגנה נגד DDoS ולוודא שהשירותים הפתוחים אינם נגישים לבקשות לא מאובטחות.</p>
        <p dir='rtl'>10. <b>Smurf Attack - </b>התקפת DDoS שבה התוקף מנצל את פרוטוקול ה-ICMP כדי להחמיר את העומס על יעד מסוים על ידי ניצול של מכשירים ברשת. בהתקפה זו, התוקף שולח בקשות ICMP Echo Request (פינגים) עם כתובת מקור מזויפת, המפנה אל הכתובת של היעד המותקף. הבקשות נשלחות אל מכשירים ברשת שמפיצים אותן לכל המחשבים ברשת המקומית שלהם, תוך כדי שהם שולחים את התגובה (ICMP Echo Reply) אל הכתובת המזויפת – שהיא הכתובת של היעד. התגובה הגדולה שנשלחת מכל מכשיר ברשת יוצרת הגברה (Amplification), כך שהתקפה אחת יכולה לגרום לכמות עצומה של תעבורה שמגיעה ליעד, ובכך להעמיס על רוחב הפס של השרת או המערכת המותקפת. התקפת Smurf מסוכנת במיוחד משום שהיא יכולה להפיק תעבורה מרובה באמצעות רשתות פגיעות, מה שמקשה על זיהוי מקורות המתקפה. הגנה מפני התקפה כזו כוללת חסימת בקשות ICMP לא רצויות ברשתות, שינוי הגדרות הפיירוולים למניעת הפצת תעבורת ICMP ויישום אמצעים להגבלת רוחב הפס ברשתות פתוחות.</p>
        {/* <h1>כיצד להתגונן</h1> */}
    </div>
    )
}
export default DoS_DDoS;